package com.konane.java;

import java.util.ArrayList;

public class ThreadedKonane extends Board implements Runnable {

	int id;
	int levelColor;
	Board board = new Board();
	Board prevBoard = new Board();
	ArrayList<Thread> threadList = new ArrayList<Thread>();
	ArrayList<Board> boardList = new ArrayList<Board>();
	
	//public Board turn() throws InterruptedException {

    
	//}
	
	
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		Board listBoard = new Board();
		listBoard=this.board;
		for (int i=0;i<8;i++) {
			boardList.add(listBoard);
		}
		for (int i=0;i<8;i++) {
		this.boardList.add(board.threadKonane(i, MIN, MAX, depth, levelColor));
		//.threadKonane(id, MIN, MAX, depth, levelColor);
		}
	}
	Board comparison(Board board1, Board board2) {
	    if (board1.bval<board2.bval)
	    {
	       return board2;
	    }
		return board1;
	}
	

}
/**     for(int n = 0;n<8; n++) {
Thread th=new Thread();
th.start();
this.threadList.add(th);
}
this.prevBoard.bval=(MIN-1);
for(int n=0;n<8;n++) {
//stores the board
this.prevBoard=this.board;

//changes the board
this.threadList.get(n).run();

//compares the board...
this.board=comparison(this.prevBoard,this.board);
}
for(int n =0 ;n<8;n++) {
this.threadList.get(n).join();
}*/